import asyncio
import json
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from config.config import WAITING_FOR_CODE, WAITING_FOR_PASSWORD
from services.session_service import SessionService
from utils.logger import Logger
from views.telegram_view import TelegramView
from utils.admin_checker import is_admin

logger = Logger()
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
session_data = {}


class SessionController:
    def __init__(self):
        self.session_service = SessionService()
        self.view = TelegramView()

    async def delete_session_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not await is_admin(update):
            return

        if not context.args or len(context.args) < 1:
            await self.view.send_message(update, "–ù–µ —É–∫–∞–∑–∞–Ω ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        session_id = int(context.args[0])
        await self.view.send_result_message(update, await self.session_service.delete_session_by_id(session_id))

    async def start_add_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        if not await is_admin(update):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        if not context.args or len(context.args) < 3:
            await self.view.send_message(
                update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_session <—Ç–µ–ª–µ—Ñ–æ–Ω> <api_id> <api_hash> [proxy_id]"
            )
            return ConversationHandler.END

        user_id = update.effective_user.id
        phone = context.args[0]
        api_id = context.args[1]
        api_hash = context.args[2]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–µ—Å—Å–∏–π
        session_data[user_id] = {
            'phone': phone,
            'api_id': api_id,
            'api_hash': api_hash,
            'chat_id': update.effective_chat.id,
            'phone_code_hash': None  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
        }

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(self.create_session_async(user_id, update, context))

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–∞—Ç
        await self.view.send_message(
            update,
            f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone}. –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞..."
        )

        return WAITING_FOR_CODE

    async def create_session_async(self, user_id, update, context):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        data = session_data[user_id]

        async def code_callback(phone, phone_code_hash):
            """–ö–æ–ª–±—ç–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram"""
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
            session_data[user_id]['phone_code_hash'] = phone_code_hash

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.view.send_code_request(data['chat_id'], context, phone)

            # –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–æ–¥ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω (—ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ process_code)
            # –°–æ–∑–¥–∞–µ–º –∏ –∂–¥–µ–º –±—É–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            session_data[user_id]['code_future'] = asyncio.Future()
            return await session_data[user_id]['code_future']

        async def password_callback(phone):
            """–ö–æ–ª–±—ç–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Telegram"""
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self.view.send_password_request(data['chat_id'], context, phone)

            # –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω
            session_data[user_id]['password_future'] = asyncio.Future()
            return await session_data[user_id]['password_future']

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –Ω–∞—à–∏–º–∏ –∫–æ–ª–±—ç–∫–∞–º–∏
        result = await self.session_service.add_session(
            data['phone'],
            data['api_id'],
            data['api_hash'],
            code_callback=code_callback,
            password_callback=password_callback
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await self.view.send_result_message(update, result)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
        return ConversationHandler.END

    async def process_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        code = update.message.text.strip()

        if user_id in session_data and 'code_future' in session_data[user_id]:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            if not session_data[user_id]['code_future'].done():
                session_data[user_id]['code_future'].set_result(code)

            await self.view.send_message(
                update,
                f"‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {code}. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥..."
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø–∞—Ä–æ–ª–µ–º
            if not session_data[user_id].get('is_2fa_required', False):
                await self.view.send_message(
                    update,
                    "üîë –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω."
                )
                return ConversationHandler.END
            # –ò–Ω–∞—á–µ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ password_callback
            return WAITING_FOR_PASSWORD
        else:
            await self.view.send_message(
                update,
                "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add_session"
            )
            return ConversationHandler.END

    async def process_password(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        password = update.message.text.strip()

        # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
        await update.message.delete()

        if user_id in session_data and 'password_future' in session_data[user_id]:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            if not session_data[user_id]['password_future'].done():
                session_data[user_id]['password_future'].set_result(password)

            await self.view.send_message(
                update,
                "‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–ª—É—á–µ–Ω. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥..."
            )

            # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
            return ConversationHandler.END
        else:
            await self.view.send_message(
                update,
                "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add_session"
            )
            return ConversationHandler.END

    async def cancel_add_session(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        user_id = update.effective_user.id

        if user_id in session_data:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ futures, –æ—Ç–º–µ–Ω—è–µ–º –∏—Ö
            if 'code_future' in session_data[user_id] and not session_data[user_id]['code_future'].done():
                session_data[user_id]['code_future'].cancel()

            if 'password_future' in session_data[user_id] and not session_data[user_id]['password_future'].done():
                session_data[user_id]['password_future'].cancel()

            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            del session_data[user_id]

        await self.view.send_message(
            update,
            "üö´ –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω."
        )

        return ConversationHandler.END

    async def check_sessions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /check_sessions - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not await is_admin(update):
            return

        await self.view.send_message(update, "–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–π...")
        await self.view.send_result_message(update, await self.session_service.check_all_sessions())

    #TODO: –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
    async def update_session_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏."""
        if not await is_admin(update):
            return

        if not context.args or len(context.args) < 2:
            await self.view.send_message(
                update,
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_session <session_id> <–Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON>"
            )
            return

        session_id = int(context.args[0])
        result = await self.session_service.update_session(session_id, json.loads(''.join(context.args[1:])))
        await self.view.send_result_message(update, result)

    async def assign_proxies_to_sessions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫ —Å–µ—Å—Å–∏—è–º."""
        if not await is_admin(update):
            return
        await self.view.send_result_message(update, await self.session_service.assign_proxies_to_sessions())

    async def get_sessions_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Å—Å–∏—è–º"""
        return await self.session_service.get_sessions_stats()
