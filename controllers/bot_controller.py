from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, ConversationHandler
from controllers.checker_controller import CheckerController
from controllers.session_controller import SessionController
from controllers.proxy_controller import ProxyController
from controllers.user_controller import UserController
from utils.logger import Logger
from views.telegram_view import TelegramView
from utils.csv_handler import CSVHandler
from config.config import BOT_TOKEN, WAITING_FOR_CODE, WAITING_FOR_PASSWORD
from utils.admin_checker import is_admin

logger = Logger()


class BotController:
    def __init__(self):
        self.checker = CheckerController()
        self.session_controller = SessionController()
        self.proxy_controller = ProxyController()
        self.user_controller = UserController()
        self.view = TelegramView()
        self.csv_handler = CSVHandler()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = ApplicationBuilder().token(BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.user_controller.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))

        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("update_session", self.session_controller.update_session_command))
        self.app.add_handler(CommandHandler("delete_session", self.session_controller.delete_session_command))
        self.app.add_handler(CommandHandler("check_sessions", self.session_controller.check_sessions_command))
        self.app.add_handler(
            CommandHandler("assign_proxys_to_sessions", self.session_controller.assign_proxies_to_sessions_command))
        self.app.add_handler(CommandHandler("add_proxy", self.proxy_controller.add_proxy_command))
        self.app.add_handler(CommandHandler("update_proxy", self.proxy_controller.update_proxy_command))
        self.app.add_handler(CommandHandler("delete_proxy", self.proxy_controller.delete_proxy_command))
        self.app.add_handler(CommandHandler("check_proxies", self.proxy_controller.check_proxies_command))
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –±–µ—Å–µ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        add_session_conv = ConversationHandler(
            entry_points=[CommandHandler('add_session', self.session_controller.start_add_session)],
            states={
                WAITING_FOR_CODE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.session_controller.process_code)],
                WAITING_FOR_PASSWORD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.session_controller.process_password)]
            },
            fallbacks=[CommandHandler('cancel', self.session_controller.cancel_add_session)]
        )
        self.app.add_handler(add_session_conv)

        # –§–∞–π–ª—ã
        self.app.add_handler(MessageHandler(filters.Document.FileExtension('csv'), self.process_csv))

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help"""
        await self.view.send_help_message(update)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π –∏ –ø—Ä–æ–∫—Å–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if not await is_admin(update):
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–π –∏ –ø—Ä–æ–∫—Å–∏
        sessions_stats = await self.session_controller.get_sessions_stats()
        proxies_stats = await self.proxy_controller.get_proxies_stats()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await self.view.send_status_message(update, sessions_stats['message'], proxies_stats['message'])

    """–ë–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —á–µ–∫–µ—Ä–∞ ==========================================================================================="""

    async def process_csv(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file = update.message.document
        file_id = file.file_id
        file_name = file.file_name

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await self.view.send_message(
            update,
            f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞ {file_name}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
        )

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_object = await context.bot.get_file(file_id)
            file_content = await file_object.download_as_bytearray()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            temp_path = self.csv_handler.save_temp_file(file_content, file_name)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä–∞
            processing_message = await self.view.send_message(
                update,
                "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ Telegram..."
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
            result = await self.checker.process_csv_file(temp_path, update.effective_user.id)

            if result:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.view.send_check_results(update, result)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                await self.view.send_document(
                    update,
                    context,
                    result['file_path'],
                    caption=f"–ù–∞–π–¥–µ–Ω–æ {result['telegram_found']} –Ω–æ–º–µ—Ä–æ–≤ —Å Telegram –∏–∑ {result['total_checked']}"
                )
            else:
                await self.view.send_message(
                    update,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Å Telegram –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ."
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await self.view.send_message(
                update,
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
            )

    # async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    #     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    #     query = update.callback_query
    #     await query.answer()
    #
    #     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±–µ–∫–∞
    #     callback_data = query.data
    #
    #     if callback_data.startswith("check_batch_"):
    #         batch_id = int(callback_data.replace("check_batch_", ""))
    #         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
    #         await self.view.send_batch_status(update, context, batch_id)
    #
    # async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
    #     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞"""
    #     logger.error(f"Exception while handling an update: {context.error}")
    #
    #     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    #     for admin_id in ADMIN_IDS:
    #         try:
    #             error_text = f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}"
    #             await self.app.bot.send_message(chat_id=admin_id, text=error_text)
    #         except Exception as e:
    #             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)
